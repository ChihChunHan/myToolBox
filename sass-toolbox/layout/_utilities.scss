// refs tailwinds @apply

@mixin apply($utilities_list){  // float-left
  
  @each $utility in $utilities_list {
  
    @include utility($utility)
  }
};

// utilities handler

@mixin utility($utility){
  $list: str-slice-by-dash($utility);
  $style:utility-handler($list);
  #{map-get($style,prop)}:#{map-get($style,value)};
};

// utilities string handler

@function str-slice-by-dash($str){
  $list:();
  @while get-dash($str) != null {
    $list:append($list, get-first-str($str) );
    $str:get-rest-str($str);
  }
  $list:append($list, $str);
  @return $list
};

@function get-dash($str){
  @return str-index($str,"-")
};

@function get-first-str($str){
  @return str-slice($str, 1, (get-dash($str) - 1) )
};

@function get-rest-str($str){
  @return str-slice($str, (get-dash($str) + 1) )
};


// utilities

@function utility-handler($list){
  $style:$utilities;
  @for $i from 1 through length($list) {
    $style:map-get($style,nth($list,$i))
  }
  @return $style
};



@function set_map_key($key,$val){
  $map : ( 
    $key:( $val )
  );
  @return $map
};

// @function set_map2($prop,$value,$map){
//   @return (prop:$prop,value:$value,$map)
// };

@function set_map($prop,$value){
  @return (prop:$prop,value:$value)
};

$test:set_map_key( inline , set_map(display, inline) );


@debug $test;
@debug map-get($test, inline );

$utilities:(
  d:(
    inline : (
      block : (
        // prop:"display",
        // value:"inline-block"
        set_map(display, inline-block)
      ),
      // set_value(display, inline)
    ),
    block : (
      prop:"display",
      value:"block"
    ),
    flex : (
      prop:"display",
      value:"flex"
    ),
    none : (
      prop:"display",
      value:"none"
    ),
  ),
  flex:(
    row:(
      prop:"flex-direction",
      value:"row",
      reverse:(
        prop:"flex-direction",
        value:"row-reverse",
      )
    ),
    col:(
      prop:"flex-direction",
      value:"column",
      reverse:(
        prop:"flex-direction",
        value:"column-reverse",
      )
    ),
    no:(
      wrap:(
        prop:"flex-wrap",
        value:"nowrap",
      )
    ),
    wrap:(
      prop:"flex-wrap",
      value:"wrap",
      reverse:(
        prop:"flex-wrap",
        value:"wrap-reverse",
      )
    )
  ),
  justify:(
    start : (
      prop:"justify-content",
      value:"flex-start"
    ),
    center : (
      prop:"justify-content",
      value:"center"
    ),
    end : (
      prop:"justify-content",
      value:"flex-end"
    ),
    between : (
      prop:"justify-content",
      value:"space-between"
    ),
    around : (
      prop:"justify-content",
      value:"space-around"
    ),
  ),


  float:(
    left : (
      prop:"float",
      value:"left"
    ),
    right : (
      prop:"float",
      value:"right"
    ),
    none : (
      prop:"float",
      value:"none"
    ),
  ),
);

@mixin display {
  &-inline{ @include utility(d-inline) }
  &-block{ @include utility(d-block) }
  &-inline-block{ @include utility(d-inline-block) }
  &-flex{ @include utility(d-flex) }
  &-none{ @include utility(d-none) }
}

@mixin g-d {
  .d { 
    @include display ;
    @each $key in $media_list {
      @include rwd($key) {
        @at-root .#{$key}\:{
          &d {
            @include display ;
          }      
        }
      }
    }
  }
}

// flex

@mixin flex-direction {
  &-row { @include utility(flex-row) }
  &-row-reverse {  @include utility(flex-row-reverse) }
  &-col {  @include utility(flex-col) }
  &-col-reverse {  @include utility(flex-col-reverse) }
}
@mixin justify-content {
  &-start { @include utility(justify-start) }
  &-center { @include utility(justify-center) }
  &-end { @include utility(justify-end) }
  &-between { @include utility(justify-between) }
  &-around { @include utility(justify-around) }
}
@mixin align-items {
  &-start { align-items: flex-start; }
  &-center { align-items: center; }
  &-end { align-items: flex-end; }
  &-stretch { align-items: stretch; }
}

@mixin align-self {
  &-start { align-self: flex-start; }
  &-center { align-self: center; }
  &-end { align-self: flex-end; }
  &-stretch { align-self: stretch; }
}

@mixin flex-wrap {
  &-no-wrap { @include utility(flex-no-wrap); }
  &-wrap { @include utility(flex-wrap); }
  &-wrap-reverse { @include utility(flex-wrap-reverse); }
}

@mixin order {
  &-first { order: -9999; }
  &-last { order: 9999; }
  &-none { order: 0; }
  @for $i from 1 to 12 {
    &-#{$i} { order: $i; }
  }
}

@mixin g-flex {
  .flex { 
    @include flex-direction;
    @include flex-wrap;
    &-center-center { @include flex-center-center;}
  }
  .justify { @include justify-content }
  .items { @include align-items }
  .self { @include align-self }
  .order { @include order }

  @each $key in $media_list {
    @include rwd($key) {
      @at-root .#{$key}\:{
        &flex { 
          @include flex-direction;
          @include flex-wrap;
          &-center-center { @include flex-center-center;}
        }
        &justify { @include justify-content }
        &items { @include align-items }
        &self { @include align-self }
        &order { @include order }
      }
    }
  }
}

// float

@mixin float{
  &-left{ @include utility(float-left) };
  &-right{ @include utility(float-right) };
  &-none{ @include utility(float-none) };
  &-fix {
    &::after{
      content: "";
      display: block;
      clear: both;
    }
  };
}

@mixin g-float {
  .float { @include float ;}

  @each $key in $media_list {
    @include rwd($key) {
      @at-root .#{$key}\:{
        &float {
          @include float;
        }    
      }
    }
  }
}

// text align

@mixin text {
  &-left { text-align: left; }
  &-center { text-align: center; }
  &-right { text-align: right;}
}

@mixin g-text {
  .text { @include text ;}

  @each $key in $media_list {
    @include rwd($key) {
      @at-root .#{$key}\:{
        &text {
          @include text;
        }    
      }
    }
  }
}

// max-width

@mixin max-width{
  &-n { max-width: none; };
  &-100 { max-width: 100% } ;
  &-90 { max-width: 90% } ;
}

@mixin g-max-w {
  .max-w { @include max-width ;}

  @each $key in $media_list {
    @include rwd($key) {
      @at-root .#{$key}\:{
        &max-w { @include max-width ;}
      }
    }
  }
}

// size
@mixin size-100($str) {
  &-100 { #{$str}: 100%; }
}

@mixin g-size {
  .h { @include size-100(height) }
  .w { @include size-100(width) }

  @each $key in $media_list {
    @include rwd($key) {
      @at-root .#{$key}\:{
        &h { @include size-100(height) }
        &w { @include size-100(width) }
      }
    }
  }
}

// margin & padding
// @mixin margin-($string) {
//   &-0 { @include margin($string,0); };
//   &-1 { @include margin($string,0.25); };
//   &-2 { @include margin($string,0.5); };
//   &-3 { @include margin($string,1); };
//   &-4 { @include margin($string,1.5); };
//   &-5 { @include margin($string,3); };
//   &-auto { @include margin($string,auto); };
// }

// @mixin margin_style {
//   @include margin-("");
//   &t { @include margin-(top); }
//   &r { @include margin-(right); }
//   &b { @include margin-(bottom); }
//   &l { @include margin-(left); }
//   &x { @include margin-(x); }
//   &y { @include margin-(y); }
// }

// @mixin g-m {
//   .m { @include margin_style() }
//   @each $key in $media_list {
//     @include rwd($key) {
//       @at-root .#{$key}\:{
//         &m { @include margin_style() }
//       }
//     }
//   }
// }

// @include

// display
// @include g-d;

// // flex
@include g-flex; 

// // float
// @include g-float;

// // text-align
// @include g-text;

// // max-width
// @include g-max-w;

// // size
// @include g-size;

// // margin 
// @include g-m;
